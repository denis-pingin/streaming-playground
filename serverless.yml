service: streaming-playground-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
- serverless-dynamodb-local
- serverless-bundle # Package our functions with Webpack
- serverless-offline
- serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  userProfilesTableName: ${self:custom.stage}-user-profiles
  streamsTableName: ${self:custom.stage}-streams
  # Set the table name here so we can use it while testing locally
  dynamodb:
    stages:
    - offline
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    userProfilesTableName: ${self:custom.userProfilesTableName}
    streamsTableName: ${self:custom.streamsTableName}
    muxTokenId: ${env:MUX_TOKEN_ID}
    muxTokenSecret: ${env:MUX_TOKEN_SECRET}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    # Restrict our IAM role permissions to
    # the specific table for the stage
    Resource:
    - "Fn::GetAtt": [ StreamsTable, Arn ]
    - "Fn::GetAtt": [ UserProfilesTable, Arn ]

functions:
  streaming-status:
    handler: api/streaming/status.main
    events:
    - http:
        path: streaming/status
        method: get
        cors: true
        authorizer: aws_iam
  streaming-start:
    handler: api/streaming/start.main
    events:
    - http:
        path: streaming/start
        method: post
        cors: true
        authorizer: aws_iam
  streaming-stop:
    handler: api/streaming/stop.main
    events:
    - http:
        path: streaming/stop/{id}
        method: post
        cors: true
        authorizer: aws_iam

  create:
    handler: api/streams/create.main
    events:
    - http:
        path: streams
        method: post
        cors: true
        authorizer: aws_iam

  get:
    handler: api/streams/get.main
    events:
    - http:
        path: streams/{id}
        method: get
        cors: true
        authorizer: aws_iam

  list:
    handler: api/streams/list.main
    events:
    - http:
        path: streams
        method: get
        cors: true
        authorizer: aws_iam

  update:
    handler: api/streams/update.main
    events:
    - http:
        path: streams/{id}
        method: put
        cors: true
        authorizer: aws_iam

  delete:
    handler: api/streams/delete.main
    events:
    - http:
        path: streams/{id}
        method: delete
        cors: true
        authorizer: aws_iam

  billing:
    handler: api/billing/billing.main
    events:
    - http:
        path: billing
        method: post
        cors: true
        authorizer: aws_iam

resources:
# API Gateway Errors
- ${file(resources/api-gateway-errors.yml)}
# DynamoDB
- ${file(resources/dynamodb-table.yml)}
# S3
- ${file(resources/s3-bucket.yml)}
# Cognito
- ${file(resources/cognito-user-pool.yml)}
- ${file(resources/cognito-identity-pool.yml)}
